#!/bin/sh
#
# collab is a wrapper arounf bindfs to provide read/write access
# to other users. the mount point (COLLAB_SHARE)
# and shared directory (COLLAB_TARGET) can either be
# specified via environment variables or on the commandline.
# 
# the name of the group to grant access to the files is read
# from the environment variable COLLAB_GROUP
#

#
# mount the collaboration directory.
# @param $1 {string} collaboration base
# @param $2 {string} mount point
# @param $3 {string} owner of the collaboration directory
# @param $4 {string} group name to grant access to
start() {
    mkdir -p "$2" && \
        bindfs -u "$3" -M "@$4" -p 0600,u+X "$1" "$2"
}

#
# unmount the given location
# @param $1 {string} mount point
#
stop() {
    fusermount -z -u "$1"
}

#
# determine the mount point status. stdout is suppressed.
# use $? to act accordingly.
# @param $1 {string} mount point
#
status() {
    grep /proc/mounts -e "$1" &>/dev/null
}

#
# print the values of environment/configuration values used
# as part of the script logic.
# @see $COLLAB_TARGET
# @see $COLLAB_SHARE
#
print_env() {
    if status "$COLLAB_SHARE";then
        COLLAB_STATUS="Running"
    else
        COLLAB_STATUS="Stopped"
    fi

    echo "Target: $COLLAB_TARGET"
    echo "Share: $COLLAB_SHARE ($COLLAB_STATUS)"
}

#
# print general help or information about a specific command.
# @param $1 {string} the program path
#                    (used for the general usage message)
# @param $2 {string} optional command name to explain. if empty
#                    or invalid, the command usage is shown
# @see usage
#
print_help() {
    case "$2" in
        start)
            echo "mount the collaboration directory"
            ;;
        stop)
            echo "stop the collaboration without any checks"
            ;;
        "safe-stop")
            echo "stop the collaboration only if mounted"
            ;;
        status)
            echo "print the mount state"
            ;;
        env)
            echo "print the mount point and collaboration directory"
            ;;
        help)
            echo "briefly explain a command or the script itself"
            ;;
        *)
            usage "$1"
            ;;
    esac
}

#
# print the command usage message.
# @param $1 {string} the program name/path
#
usage() {
    printf "usage: %s COMMAND [BASE] [MOUNT]\n" "$1"
    printf "commands: start,stop,status,safe-stop,help,env\n"
}

# determine the collaboration base directory
# commandline directories have highest priority
# over configuration values
if test -d "$2";then
    COLLAB_TARGET="`readlink -fn "$2"`"
elif test -n "$COLLAB_TARGET";then
    COLLAB_TARGET="`readlink -fn "$COLLAB_TARGET"`"
else
    COLLAB_TARGET="$PWD"
fi

# read the mount point location
if test -d "$3";then
    COLLAB_SHARE="`readlink -mn "$3"`"
elif test -n "$COLLAB_SHARE";then
    COLLAB_SHARE="`readlink -mn "$COLLAB_SHARE"`"
else
    COLLAB_SHARE="/tmp/collab/$USER"
fi

# group name to grant access to collaboration share
if test -z "$COLLAB_GROUP";then
    COLLAB_GROUP="users"
fi

case "$1" in
    start)
        echo "Collaboration on '$COLLAB_TARGET' initialized at '$COLLAB_SHARE'"
        start "$COLLAB_TARGET" "$COLLAB_SHARE" "$USER" "$COLLAB_GROUP"
        exit $?
        ;;
    stop)
        echo "Stopping collaboration in '$COLLAB_SHARE'"
        stop "$COLLAB_SHARE"
        exit $?
        ;;
    status)
        status "$COLLAB_SHARE" && echo "Running" || echo "Stopped"
        exit $?
        ;;
    safe-stop)
        status "$COLLAB_SHARE" && stop "$COLLAB_SHARE"
        exit $?
        ;;
    env)
        print_env
        ;;
    help)
        print_help "$0" "$2"
        ;;
    *)
        printf "'%s' is not a valid command\n" "$1" 1>&2
        usage "$0" 1>&2
        exit 1
        ;;
esac

exit 0
